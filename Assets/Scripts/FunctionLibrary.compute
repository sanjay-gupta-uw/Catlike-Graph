// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToSphereKernel
#pragma kernel WaveToTorusKernel

#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel
#pragma kernel MultiWaveToSphereKernel
#pragma kernel MultiWaveToTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel
#pragma kernel RippleToTorusKernel

#pragma kernel SphereToWaveKernel
#pragma kernel SphereToMultiWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToTorusKernel

#pragma kernel TorusToWaveKernel
#pragma kernel TorusToMultiWaveKernel
#pragma kernel TorusToRippleKernel
#pragma kernel TorusToSphereKernel
#pragma kernel TorusKernel

RWStructuredBuffer<float3> _Positions;

float _Step, _Time, _TransitionProgress;
uint _Resolution;

float2 GetUV(uint2 id)
{
    return (float2(id) + 0.5) * _Step - 1.0;
}

void SetPosition(uint2 id, float3 pos)
{
    if (id.x < _Resolution && id.y < _Resolution) 
    {
        _Positions[id.y * _Resolution + id.x] = pos;
    }
}

#define PI 3.14159265359

float3 Wave(float u, float v, float t)
{
    float3 pos;
    pos.x = u;
    pos.y = sin(PI * (u + v + t));
    pos.z = v;
    return pos;
}

float3 MultiWave(float u, float v, float t)
{
    float3 pos;
    pos.x = u;
    pos.y = sin(PI * (u + 0.5 * t));
    pos.y += 0.5 * sin(2.0 * PI * (v + t));
    pos.y += sin(PI * (u + v + 0.25 * t));
    pos.y *= 1.0 / 2.5;
    pos.z = v;
    return pos;
}

float3 Ripple(float u, float v, float t)
{
    float d = sqrt(u * u + v * v);
    float3 pos;
    pos.x = u;
    pos.y = sin(PI * (4.0 * d - t));
    pos.y /= 1.0 + 10.0 * d;
    pos.z = v;
    return pos;
}

float3 Sphere(float u, float v, float t)
{
    float r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
    float s = r * cos(0.5 * PI * v);
    float3 pos;
    pos.x = s * sin(PI * u);
    pos.y = r * sin(0.5 * PI * v);
    pos.z = s * cos(PI * u);
    return pos;
}

float3 Torus(float u, float v, float t)
{
    float r1 = 0.7 + 0.1 * sin(PI * (6.0 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (8.0 * u + 4.0 * v + 2.0 * t));
    float s = r2 * cos(PI * v) + r1;
    float3 pos;
    pos.x = s * sin(PI * u);
    pos.y = r2 * sin(PI * v);
    pos.z = s * cos(PI * u);
    return pos;
}
#define KERNEL_FUNCTION(function) \
    [numthreads(8,8,1)] \
	void function##Kernel (uint3 id: SV_DispatchThreadID) \
    { \
        float2 uv = GetUV(id.xy); \
        SetPosition(id, function(uv.x, uv.y, _Time)); \
    }

#define KERNEL_MORPH_FUNCTION(functionA, functionB) \
    [numthreads(8,8,1)] \
    void functionA##To##functionB##Kernel (uint3 id: SV_DispatchThreadID) \
    { \
        float2 uv = GetUV(id); \
        float3 pos = lerp( \
            functionA(uv.x, uv.y, _Time), \
            functionB(uv.x, uv.y, _Time), \
            _TransitionProgress); \
        SetPosition(id, pos); \
    }

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(Torus)

KERNEL_MORPH_FUNCTION(Wave, MultiWave);
KERNEL_MORPH_FUNCTION(Wave, Ripple);
KERNEL_MORPH_FUNCTION(Wave, Sphere);
KERNEL_MORPH_FUNCTION(Wave, Torus);

KERNEL_MORPH_FUNCTION(MultiWave, Wave);
KERNEL_MORPH_FUNCTION(MultiWave, Ripple);
KERNEL_MORPH_FUNCTION(MultiWave, Sphere);
KERNEL_MORPH_FUNCTION(MultiWave, Torus);

KERNEL_MORPH_FUNCTION(Ripple, Wave);
KERNEL_MORPH_FUNCTION(Ripple, MultiWave);
KERNEL_MORPH_FUNCTION(Ripple, Sphere);
KERNEL_MORPH_FUNCTION(Ripple, Torus);

KERNEL_MORPH_FUNCTION(Sphere, Wave);
KERNEL_MORPH_FUNCTION(Sphere, MultiWave);
KERNEL_MORPH_FUNCTION(Sphere, Ripple);
KERNEL_MORPH_FUNCTION(Sphere, Torus);

KERNEL_MORPH_FUNCTION(Torus, Wave);
KERNEL_MORPH_FUNCTION(Torus, MultiWave);
KERNEL_MORPH_FUNCTION(Torus, Ripple);
KERNEL_MORPH_FUNCTION(Torus, Sphere);